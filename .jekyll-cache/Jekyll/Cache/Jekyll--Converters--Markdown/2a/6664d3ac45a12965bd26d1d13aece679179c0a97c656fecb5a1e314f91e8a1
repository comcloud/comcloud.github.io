I"~X<main class="main-content">
  <!-- Hero Section -->
  <section class="hero">
    <div class="container">
      <div class="hero-container">
        <div class="hero-left">
          <div class="hero-avatar">
            <span>📚</span>
          </div>
        </div>
        <div class="hero-right">
          <h1 class="hero-title">技术文章</h1>
          <p class="hero-subtitle">探索人工智能与深度学习的实践之路</p>
          <p class="hero-description">记录学习心得、技术探索和项目实践，分享有价值的技术内容。</p>
          <div class="hero-actions">
            <a href="/personal/resume/" class="btn btn-secondary">查看简历</a>
            <a href="/" class="btn btn-ghost">返回首页</a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Content Section -->
  <section class="content-section">
    <div class="container">
      <!-- 文章统计信息 -->
      <div class="stats-container" id="statsContainer">
        <div class="stat-item">
          <span class="stat-number" id="totalArticles">-</span>
          <span class="stat-label">总文章数</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="totalSeries">-</span>
          <span class="stat-label">系列数</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="lastUpdated">-</span>
          <span class="stat-label">最后更新</span>
        </div>
      </div>

      <!-- 动态文章列表 -->
      <div id="articlesContainer">
        <div class="loading">📖 正在加载文章...</div>
      </div>
    </div>
  </section>

  <script>
  let articles = [];
  let categorizedArticles = {};
  
  // 获取文章数据
  async function loadArticles() {
    try {
      console.log('🔄 开始检测文章更新...');
      
      // 尝试多个可能的路径
      const possiblePaths = [
        '/assets/data/articles.json',
        '/assets/blog-data.json',
        '/assets/data/articles.json',
        '/assets/blog-data.json'
      ];
      
      let articlesData = [];
      let loaded = false;
      
      for (const path of possiblePaths) {
        try {
          console.log(`尝试加载: ${path}`);
          const response = await fetch(path + '?t=' + Date.now());
          
          if (response.ok) {
            const data = await response.json();
            // 检查数据格式，转换blog-data.json格式为articles格式
            if (Array.isArray(data) && data.length > 0) {
              if (data[0].files) {
                // 这是blog-data.json格式，需要转换
                articlesData = convertBlogDataToArticles(data);
              } else {
                // 这是articles.json格式
                articlesData = data;
              }
              loaded = true;
              console.log(`✅ 成功从 ${path} 加载了 ${articlesData.length} 篇文章`);
              break;
            }
          }
        } catch (err) {
          console.warn(`从 ${path} 加载失败:`, err.message);
        }
      }
      
      if (loaded) {
        // 检查是否有更新
        if (JSON.stringify(articlesData) !== JSON.stringify(articles)) {
          articles = articlesData;
          renderArticles();
          updateStats();
        }
      } else {
        console.error('❌ 所有数据源都加载失败，尝试使用静态回退方案');
        loadStaticFallback();
      }
    } catch (error) {
      console.error('❌ 文章数据加载异常:', error);
      document.getElementById('articlesContainer').innerHTML = 
        '<div class="error">❌ 网络连接异常，请检查网络连接</div>';
    }
  }
  
  // 转换blog-data.json格式为articles格式
  function convertBlogDataToArticles(blogData) {
    const articles = [];
    
    function extractFiles(item, basePath = '') {
      if (item.files && Array.isArray(item.files)) {
        item.files.forEach(file => {
          if (file.url && file.title) {
            articles.push({
              title: file.title,
              url: file.url,
              type: file.type || 'markdown',
              category: item.title || item.name || '未分类',
              date: file.date || new Date().toISOString().split('T')[0],
              tags: file.tags || [],
              description: file.description || item.description || '无描述信息',
              path: file.path || basePath
            });
          }
        });
      }
      
      // 递归处理嵌套文件
      if (item.children && Array.isArray(item.children)) {
        item.children.forEach(child => extractFiles(child, basePath));
      }
    }
    
    blogData.forEach(item => extractFiles(item));
    return articles;
  }

  // 静态回退方案 - 手动编写的文章数据
  function loadStaticFallback() {
    console.log('🔄 使用静态回退数据...');
    
    articles = [
      {
        title: '激活函数',
        url: '/articles/深度学习基础知识/激活函数/',
        type: 'markdown',
        category: '深度学习基础',
        date: '2024-01-01',
        tags: ['深度学习', '激活函数', '神经网络'],
        description: '深度学习中常用激活函数的原理和应用'
      },
      {
        title: '损失函数总览',
        url: '/articles/深度学习基础知识/损失函数/损失函数总览/',
        type: 'markdown',
        category: '深度学习基础',
        date: '2024-01-02',
        tags: ['深度学习', '损失函数', '机器学习'],
        description: '常见损失函数的原理、特点和使用场景'
      },
      {
        title: 'Llama 总览',
        url: '/articles/llm/llama/总览/',
        type: 'markdown',
        category: 'LLM',
        date: '2024-01-05',
        tags: ['LLM', 'Llama', '大模型'],
        description: 'Llama系列大模型全面解析'
      },
      {
        title: '量化的核心原理',
        url: '/articles/llm/qwen/量化的核心原理/',
        type: 'markdown',
        category: 'LLM',
        date: '2024-01-03',
        tags: ['LLM', 'Qwen', '量化'],
        description: '神经网络量化的数学原理和实现机制'
      },
      {
        title: 'DeepSeek 介绍',
        url: '/articles/llm/deepseek/intro/',
        type: 'markdown',
        category: 'LLM',
        date: '2024-01-04',
        tags: ['LLM', 'DeepSeek', '代码生成'],
        description: '技术特点和应用场景介绍'
      },
      {
        title: 'Markdown 语法示例',
        url: '/articles/example/markdown-syntax/',
        type: 'markdown',
        category: '示例',
        date: '2024-01-06',
        tags: ['示例', 'Markdown'],
        description: '展示所有支持的Markdown语法功能'
      }
    ];
    
    renderArticles();
    updateStats();
    
    // 显示静态模式提示
    const container = document.getElementById('articlesContainer');
    const notice = document.createElement('div');
    notice.className = 'static-mode-notice';
    notice.innerHTML = '📌 当前使用静态模式，部分文章可能未展示。建议刺新页面再试。';
    container.insertBefore(notice, container.firstChild);
  }
  
  // 按分类组织文章
  function categorizeArticles() {
    categorizedArticles = {};
    
    articles.forEach(article => {
      const category = article.category || '未分类';
      if (!categorizedArticles[category]) {
        categorizedArticles[category] = [];
      }
      categorizedArticles[category].push(article);
    });
    
    // 按文章数量排序分类
    const sortedCategories = Object.keys(categorizedArticles).sort((a, b) => {
      return categorizedArticles[b].length - categorizedArticles[a].length;
    });
    
    const sortedCategorizedArticles = {};
    sortedCategories.forEach(category => {
      sortedCategorizedArticles[category] = categorizedArticles[category]
        .sort((a, b) => new Date(b.date) - new Date(a.date)); // 按日期排序
    });
    
    categorizedArticles = sortedCategorizedArticles;
  }
  
  // 渲染文章列表
  function renderArticles() {
    categorizeArticles();
    
    const container = document.getElementById('articlesContainer');
    let html = '';
    
    if (Object.keys(categorizedArticles).length === 0) {
      html = '<div class="empty-state">📝 暂无文章，请添加文章到articles文件夹</div>';
    } else {
      Object.entries(categorizedArticles).forEach(([category, categoryArticles], index) => {
        const categoryId = `category-${category.replace(/[^a-zA-Z0-9]/g, '-')}`;
        const isExpanded = index < 2; // 默认展开前两个分类
        
        html += `
          <div class="article-category" data-category="${category}">
            <div class="category-header" onclick="toggleCategory('${categoryId}')">
              <h3 class="category-title">
                <span class="category-icon">${getCategoryIcon(category)}</span>
                ${category}
                <span class="article-count">(${categoryArticles.length})</span>
              </h3>
              <span class="toggle-icon ${isExpanded ? 'expanded' : ''}" id="toggle-${categoryId}">▼</span>
            </div>
            <div class="category-content ${isExpanded ? 'expanded' : ''}" id="${categoryId}">
              <div class="articles-grid">
        `;
        
        categoryArticles.forEach(article => {
          const tags = article.tags && article.tags.length > 0 ? 
            article.tags.map(tag => `<span class="tag">${tag}</span>`).join('') : '';
          
          const excerpt = article.excerpt || article.description || '暂无摘要';
          const formattedDate = formatDate(article.date);
          
          html += `
            <div class="article-card">
              <div class="article-header">
                <h4 class="article-title">
                  <a href="${article.url}">${article.title}</a>
                </h4>
                <div class="article-meta">
                  <span class="article-date">📅 ${formattedDate}</span>
                  ${article.reading_time ? `<span class="reading-time">⏱️ ${article.reading_time}</span>` : ''}
                </div>
              </div>
              <div class="article-excerpt">${excerpt}</div>
              ${tags ? `<div class="article-tags">${tags}</div>` : ''}
            </div>
          `;
        });
        
        html += `
              </div>
            </div>
          </div>
        `;
      });
    }
    
    container.innerHTML = html;
  }
  
  // 切换分类展开/折叠
  function toggleCategory(categoryId) {
    const content = document.getElementById(categoryId);
    const toggleIcon = document.getElementById(`toggle-${categoryId}`);
    
    if (content && toggleIcon) {
      content.classList.toggle('expanded');
      toggleIcon.classList.toggle('expanded');
    }
  }
  
  // 获取分类图标
  function getCategoryIcon(category) {
    const iconMap = {
      '深度学习基础': '🧠',
      'LLM': '🤖',
      '项目实践': '🚀',
      '技术分享': '💡',
      '学习笔记': '📝',
      '后端开发': '⚙️',
      '前端开发': '🎨',
      '算法': '🔢',
      '数据库': '🗄️',
      '未分类': '📂'
    };
    return iconMap[category] || '📄';
  }
  
  // 格式化日期
  function formatDate(dateString) {
    if (!dateString) return '未知日期';
    const date = new Date(dateString);
    return date.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }
  
  // 更新统计信息
  function updateStats() {
    document.getElementById('totalArticles').textContent = articles.length;
    document.getElementById('totalSeries').textContent = Object.keys(categorizedArticles).length;
    
    if (articles.length > 0) {
      const latestDate = Math.max(...articles.map(a => new Date(a.date).getTime()));
      document.getElementById('lastUpdated').textContent = formatDate(new Date(latestDate));
    } else {
      document.getElementById('lastUpdated').textContent = '暂无';
    }
  }
  
  // 页面加载时初始化
  document.addEventListener('DOMContentLoaded', function() {
    loadArticles();
    
    // 定时检测新文章（每30秒检查一次）
    setInterval(loadArticles, 30000);
    console.log('⏰ 已启动文章自动检测，每30秒检查一次更新');
  });
  
  // 全局函数，供HTML调用
  window.toggleCategory = toggleCategory;
  </script>
  
  <style>
  /* Articles 页面特定样式 - 优化版 */
  .hero {
    background: var(--gradient-primary);
    padding: var(--space-20) 0 var(--space-16);
    position: relative;
    overflow: hidden;
  }
  
  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 20"><defs><radialGradient id="a" cx="50%" cy="50%"><stop offset="0%" stop-color="%23fff" stop-opacity=".1"/><stop offset="100%" stop-color="%23fff" stop-opacity="0"/></radialGradient></defs><circle cx="10" cy="10" r="10" fill="url(%23a)"/><circle cx="50" cy="5" r="5" fill="url(%23a)"/><circle cx="90" cy="15" r="8" fill="url(%23a)"/></svg>') repeat;
    opacity: 0.3;
    animation: floatPattern 20s linear infinite;
  }
  
  @keyframes floatPattern {
    from { transform: translateX(0); }
    to { transform: translateX(100px); }
  }
  
  .hero-container {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: var(--space-12);
    align-items: center;
    position: relative;
    z-index: 1;
  }
  
  .hero-avatar {
    width: 120px;
    height: 120px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-2xl);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }
  
  .hero-title {
    font-size: var(--text-5xl);
    font-weight: 800;
    margin-bottom: var(--space-6);
    color: white;
    text-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  .hero-subtitle {
    font-size: var(--text-2xl);
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: var(--space-4);
    font-weight: 300;
  }
  
  .hero-description {
    font-size: var(--text-lg);
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: var(--space-8);
    line-height: 1.6;
  }
  
  .hero-actions {
    display: flex;
    gap: var(--space-4);
  }
  
  .hero-actions .btn {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
    font-weight: 600;
  }
  
  .hero-actions .btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }
  
  /* 统计信息区域 */
  .stats-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-8);
    margin: var(--space-16) 0 var(--space-20);
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .stat-item {
    background: white;
    padding: var(--space-8);
    border-radius: var(--radius-2xl);
    text-align: center;
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-lg);
    transition: all var(--transition-base);
    position: relative;
    overflow: hidden;
  }
  
  .stat-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--gradient-secondary);
  }
  
  .stat-item:hover {
    transform: translateY(-8px);
    box-shadow: var(--shadow-xl);
  }
  
  .stat-number {
    display: block;
    font-size: var(--text-4xl);
    font-weight: 800;
    background: var(--gradient-secondary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1;
    margin-bottom: var(--space-3);
  }
  
  .stat-label {
    font-size: var(--text-base);
    color: var(--text-secondary);
    font-weight: 500;
  }
  
  /* 文章分类区域 */
  .article-category {
    margin-bottom: var(--space-12);
    background: white;
    border-radius: var(--radius-2xl);
    border: 1px solid var(--border-color);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    transition: all var(--transition-base);
  }
  
  .article-category:hover {
    box-shadow: var(--shadow-lg);
  }
  
  .category-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-8) var(--space-10);
    background: var(--gradient-primary);
    cursor: pointer;
    transition: all var(--transition-base);
    position: relative;
    overflow: hidden;
  }
  
  .category-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }
  
  .category-header:hover::before {
    left: 100%;
  }
  
  .category-title {
    margin: 0;
    display: flex;
    align-items: center;
    gap: var(--space-4);
    font-size: var(--text-2xl);
    color: white;
    font-weight: 700;
    position: relative;
    z-index: 1;
  }
  
  .category-icon {
    font-size: var(--text-3xl);
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
  }
  
  .article-count {
    font-size: var(--text-lg);
    color: rgba(255, 255, 255, 0.8);
    font-weight: 400;
    background: rgba(255, 255, 255, 0.2);
    padding: var(--space-1) var(--space-3);
    border-radius: var(--radius-full);
    backdrop-filter: blur(10px);
  }
  
  .toggle-icon {
    font-size: var(--text-xl);
    color: rgba(255, 255, 255, 0.8);
    transition: transform var(--transition-base);
    position: relative;
    z-index: 1;
  }
  
  .toggle-icon.expanded {
    transform: rotate(180deg);
  }
  
  .category-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height var(--transition-slow);
  }
  
  .category-content.expanded {
    max-height: 3000px;
  }
  
  .articles-grid {
    padding: var(--space-10);
    display: grid;
    gap: var(--space-8);
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  }
  
  .article-card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-xl);
    padding: var(--space-8);
    transition: all var(--transition-base);
    position: relative;
    overflow: hidden;
  }
  
  .article-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: var(--gradient-accent);
    transform: scaleX(0);
    transition: transform var(--transition-base);
  }
  
  .article-card:hover {
    transform: translateY(-6px);
    box-shadow: var(--shadow-xl);
    border-color: var(--primary-color);
    background: white;
  }
  
  .article-card:hover::before {
    transform: scaleX(1);
  }
  
  .article-header {
    margin-bottom: var(--space-6);
  }
  
  .article-title {
    margin: 0 0 var(--space-3) 0;
    font-size: var(--text-xl);
    line-height: 1.4;
    font-weight: 700;
  }
  
  .article-title a {
    color: var(--text-primary);
    text-decoration: none;
    transition: color var(--transition-base);
    background: linear-gradient(135deg, var(--text-primary), var(--primary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .article-title a:hover {
    background: var(--gradient-secondary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .article-meta {
    display: flex;
    gap: var(--space-4);
    align-items: center;
    flex-wrap: wrap;
  }
  
  .article-date, .reading-time {
    font-size: var(--text-sm);
    color: var(--text-muted);
    display: flex;
    align-items: center;
    gap: var(--space-1);
    background: var(--bg-tertiary);
    padding: var(--space-1) var(--space-3);
    border-radius: var(--radius-full);
  }
  
  .article-excerpt {
    color: var(--text-secondary);
    line-height: 1.7;
    margin-bottom: var(--space-6);
    font-size: var(--text-base);
  }
  
  .article-tags {
    display: flex;
    gap: var(--space-2);
    flex-wrap: wrap;
  }
  
  .tag {
    background: var(--gradient-secondary);
    color: white;
    padding: var(--space-2) var(--space-4);
    border-radius: var(--radius-full);
    font-size: var(--text-xs);
    font-weight: 600;
    box-shadow: var(--shadow-sm);
    transition: all var(--transition-base);
  }
  
  .tag:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }
  
  .loading, .error, .empty-state {
    text-align: center;
    padding: var(--space-20);
    color: var(--text-secondary);
    font-size: var(--text-xl);
    background: white;
    border-radius: var(--radius-2xl);
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-md);
  }
  
  .error {
    color: #e74c3c;
  }
  
  /* 响应式优化 */
  @media (max-width: 768px) {
    .hero {
      padding: var(--space-16) 0 var(--space-12);
    }
    
    .hero-container {
      grid-template-columns: 1fr;
      text-align: center;
      gap: var(--space-8);
    }
    
    .hero-avatar {
      width: 100px;
      height: 100px;
      margin: 0 auto;
    }
    
    .hero-title {
      font-size: var(--text-4xl);
    }
    
    .hero-subtitle {
      font-size: var(--text-xl);
    }
    
    .stats-container {
      grid-template-columns: 1fr;
      gap: var(--space-6);
      margin: var(--space-12) 0 var(--space-16);
    }
    
    .stat-item {
      padding: var(--space-6);
    }
    
    .articles-grid {
      grid-template-columns: 1fr;
      padding: var(--space-6);
      gap: var(--space-6);
    }
    
    .article-card {
      padding: var(--space-6);
    }
    
    .category-header {
      padding: var(--space-6) var(--space-8);
    }
    
    .category-title {
      font-size: var(--text-xl);
      gap: var(--space-3);
    }
    
    .hero-actions {
      flex-direction: column;
      align-items: stretch;
    }
  }
  
  @media (max-width: 480px) {
    .articles-grid {
      padding: var(--space-4);
    }
    
    .article-card {
      padding: var(--space-4);
    }
    
    .stats-container {
      gap: var(--space-4);
    }
    
    .stat-item {
      padding: var(--space-4);
    }
  }
  </style>
</main>
:ET